خلاصه‌نویسی کاساندرا:‌
کاساندرا یک دیتابیس column-based است با قابلیت‌های ذیل:
- نظیر به نظیر (peer-peer) و نامتمرکز (Decentralized) است. به همین‌خاطر master-slaveی در کار نیست و دارای uptime در ۱۰۰٪‌ مواقع است.
- به زبان جاوا نوشته شده است. بنابراین از جاوای native پشتیبانی می‌کند.
- از داده‌های ساختارمند و غیرساختاریافته پشتیبانی می‌کند.
- مقیاس‌پذیری خطی دارد،‌ یعنی ظرفیت و سرعت cluster متناسب با تعداد nodeهای آن است.
- کارایی (performance) بالایی دارد. سرعت بالای آن به دلیل ساختار آن و وجود SSTableها است، زیرا داده‌ها در آن همان‌طور که اسمش پیداست، به صورت مرتب‌شده (sorted) هستند و به همین دلیل پیدا کردن داده‌ها بسیار سریع اتفاق می‌افتد. سرعت نوشتن هم به دلیل log-based و memory-based بودن آن (چون هیچ عملیات خواندنی در آن اتفاق نمی‌افتد) بسیار بسیار سریع است. یکی دیگر از دلایل سرعت بالای نوشتن، استفاده از I/O ترتیبی و نه تصادفی است!
- توزیع داده و replicationها روی همه‌ی nodeهای clusterبه صورت خودکار صورت می‌گیرد.
- تشخیص خرابی آن Boolean نیست که بگوید آن node بالا هست یا خیر. در حالی که با استفاده از الگوریتم Phi Accural Failure Detection Algorithm یک عدد به ما می‌دهد.



*‌ تعریف Coordinator: به nodeی می‌گویند که کاربر جواب درخواست خود را از آن دریافت می‌کند. هر nodeی روی cluster می‌تواند درخواست‌های خواندن/نوشتن را قبول کند و coordinator شود. coordinator تشخیص می‌دهد که کدام nodeها مسئولیت نگهداری از داده‌ی درخواست را دارند و به صورت یک proxy بین nodeها و کاربر عمل می‌کند.

تعریف Snitch :Snitch روی چگونگی توزیع replicaها با در نظر گرفتن تنظیمات دیتاسنترها و rackها تاثیر می‌گذارد. در واقع Snitch تشخیص می‌دهد که کدام دیتاسنترها و rackها برای مطلع کردن cassandra از توپولوژی routing درخواست‌ها به صورت کارآمد استفاده می‌شوند.

تعریف Seed node: این nodeها اولین nodeهایی هستند که در cluster برای بهبود و تسهیل راه‌اندازی (bootstrap) پردازه‌ها برای nodeهای جدیدی که تازه به cluster اضافه شده‌اند، از آن‌ها استفاده می‌شود
- با ایده‌برداری از دو دیتابیس Google BigTable و Amazon Dynamo توسط شرکت FaceBook ساخته شده است. 

تعریف Gossip: پروتکلی که nodeها با یکدیگر صحبت می‌کنند. در واقع پروتکلی است برای تیادل اطلاعات nodeها درباره‌ی خودشان و تا حداکثر سه همسایه‌هاشون. اطلاعات مربوط به Gossip روی سیستم به منظور اجازه دادن سریع برای restart برای هم node ذخیره می‌شود.

تعریف Tunable Consistency:
درجه‌ی سازگاری یا Consistency level عمل نوشتن، تعداد ackهایی است که از replicaها دریافت می‌شود.

مکانیزم‌های Repair:

* بازسازی خواندن (Read Repair):‌ اگر replica ناسازگار (inconsistent) باشد، coordinator یک آپدیت ارسال می‌کند تا سازگار شود.
*‌Hinted Handoff
هدف آن کاهش مدت زمان بازیابی یک failed node هنگام پیوستن دوباره به cluster است. امکان نوشتن قطعی را با قربانی کردن سازگاری عمل خواندن می‌دهد. اگر هنگامی که یک عمل write انجام می‌شود، یکی از replicaها پایین باشد، replicaی سالم یک hint ذخیره می‌کند. در بدترین شرایط وقتی همه‌ی replicaها، پایین هستند، coordinator یک hint ذخیره می‌کند. بعد از این که دوباره nodeها بالا آمدند، با استفاده از hintهای ذخیره شده، بعد از handoff کامل، عمل خواندن سازگار است
* Anti-entropy:
یعنی این اطمینان را می‌دهد تا همه‌ی اطلاعات موجود در همه‌ی nodeها،‌ به روز هستند.
نکته: hint دارای اطلاعاتی در مورد مکان failed node، کلید ردیف (row key) موثر و داده‌ی نوشته شده است.
مکانیزم کار کردن کاساندرا: Cassandra borrows the commitlog mechanism from Google BigTable to ensure data
durability. Whenever a write data request is received by a node, it is written into the
commitlog. The data that is being updated is then written to a memory structure,
known as memtable. When the memtable is full, the data inside the memtable is
flushed to a disk storage structure, SSTable. The writes are automatically partitioned
by the row key and replicated to the other nodes holding the same partition.

دیتابیس Google BigTable: 
براساس تئوری CAP، دارای ویژگی‌های Consistency و Partition-Tolerance است. (شکل bigtable اضافه شود.)
دیتابیس Amazon Dynamo:‌ یک دیتابیس key-value based هست که ساختار نظیر به نظیر دارد. تمرکز Dynamo بیش‌تر روی High Availability است و مهم‌ترین ویژگی ایده‌ی آن Eventual Consistency آن است. براساس تئوری CAP، دارای ویژگی‌های Consistency و ‌Availability است.
نکات:
- تعریف Consistency:‌ یعنی داده‌ای که از هر node روی cluster می‌گیریم،‌ به روزترین یا اصطلاحا most recent باشد.
 
- Consistency means that data is the same across the cluster, so you can read or write from/to any node and get the same data.
- Availability means the ability to access the cluster even if a node in the cluster goes down.
- Partition tolerance means that the cluster continues to function even if there is a "partition" (communication break) between two nodes (both nodes are up, but can't communicate).
انواع Consistency:
- Strong Consistency:
هربار آپدیت رخ دهد، دیتابیس باید در تمام nodeها، آن آپدیت را انجام داده و بعد ACK برگرداند. (After the update completes, any subsequent access will return the same value.)
- Weak Consistency:
به محض دریافت آپدیت و نوشتن در node اول ack را برمی‌گرداند و سپس در background روی سایر nodeها تلاش می‌کند، آپدیت‌ها را اعمال کند. ممکن است در حین این کار این آپدیت‌ها به دلایل مختلف drop شوند و به بقیه نرسند.
- Eventual Consistency:
زیر گروهی از weak-consistencyها هستند با این تفاوت که اگر شبکه شلوغ نباشد و آپدیت‌ها زیاد نباشند، تلاش می‌کند که آپدیت‌ها را سریعا به تمامی nodeها برساند ولی با این حال تضمینی برای آن وجود ندارد.


نکته:‌ دیتابیس‌های multidimensional یعنی علاوه 
